# name: Build IPA

# on:
#   push:
#     branches:
#       - ios-builld-certificates
 
# jobs:
#   build:
#     env:
#       VITE_BASE_API_URL: ${{vars.VITE_BASE_API_URL}}
#       VITE_API_PREFIX: ${{vars.VITE_API_PREFIX}}
#       VITE_BASE_URL: ${{vars.VITE_BASE_URL}}    
#     name: Build IPA
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '21'

#       - name: Install Ionic
#         run: yarn global add @ionic/cli

#       - name: Install app dependencies
#         run: yarn install

#       - name: Copy IOS
#         run: ionic capacitor sync

#       - uses: sparkfabrik/ios-build-action@v2.3.0
#         name: Build and Upload IPA artifact
#         with:
#           configuration: Debug
#           export-method: package
#           project-path: ios/App/App.xcodeproj
#           output-path: build-${{ github.sha }}.ipa
#           team-id: ${{ vars.APPLE_TEAM_ID }}
#           team-name: ${{ vars.APPLE_TEAM_NAME }}
#           ios-app-id: ${{ vars.APPLE_APP_ID }}
#           fastlane-version: "2.220.0"


#       - uses: yukiarrr/ios-build-action@v1.11.2
#         with:
#           project-path: ios/App/App.xcodeproj
#           p12-base64: ${{ secrets.P12_CERT }}
#           output-path: build-${{ github.sha }}.ipa
#           certificate-password: ${{ secrets.P12_PASSWORD }}
#           mobileprovision-base64: ${{ secrets.MOBILE_PROVISION }}
#           code-signing-identity: "iOS Distribution"
#           team-id: ${{ secrets.TEAM_ID }}

#       - name: Upload dev IPA
#         uses: actions/upload-artifact@v4
#         with:
#           name: app-dev
#           path: build-${{ github.sha }}.ipa
name: "Build IPA"

on:
  push:
    branches:
      - ios-builld-certificates

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Ionic
        run: yarn global add @ionic/cli

      - name: Install app dependencies
        run: yarn install

      - name: Copy IOS
        run: ionic capacitor sync

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_CERT }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILE_PROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: build archive
        run: |
          xcodebuild -scheme "App" \
          -archivePath $RUNNER_TEMP/app.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        run: |
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/app.xcarchive -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/App.ipa
